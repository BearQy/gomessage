<template>
    <el-card shadow="always">

        <!--卡片标题-->
        <div slot="header" class="clearfix">
            <span style="padding-left: 50px">用户变量</span>
            <el-button style="float: right; padding: 3px 0" type="text" v-on:click="post_data">保存变量</el-button>
        </div>

        <!--Table表格-->
        <el-table
            :data="configList"
            style="width: 100%"
            border="true">
            <el-table-column prop="key" label="Key（自定义变量名）"></el-table-column>
            <el-table-column prop="value" label="Value（请求数据中的字段名）"></el-table-column>
            <el-table-column fixed="right" label="操作" width="100">
                <template slot-scope="scope">
                    <el-button @click.native.prevent="deleteRow(scope.$index, configList)" type="text" size="small">移除</el-button>
                </template>
            </el-table-column>
        </el-table>

        <br>

        <!--输入框，是从最初的（可增加数量的输入框）转变过来的-->
        <div v-for="(list, index) in mapList2" :key="index">
            <!-- 填写服务器地址，col之间的间隔为20 -->
            <el-row :gutter="20">

                <!--Key-->
                <el-col :span="12">
                    <div class="DataMapGridContent">
                        <el-input placeholder="自定义字符串，不能有符号" v-model="list.mapKey">
                            <template slot="prepend">
                                Key:
                            </template>
                        </el-input>
                    </div>
                </el-col>

                <!--Value-->
                <el-col :span="12">
                    <div class="DataMapGridContent">
                        <el-input placeholder="Json Key Path" v-model="list.mapValue">
                            <template slot="prepend">
                                Value:
                            </template>
                        </el-input>
                    </div>
                </el-col>
            </el-row>
        </div>

        <br>

        <!--添加新的输入框（+号按钮）-->
        <el-button type="primary" v-on:click="addTableData" size="mini">新增变量</el-button>

<!--        <br>-->
<!--        <br>-->
<!--        <br>-->


        <!--提交按钮-->
<!--        <el-row :gutter="20">-->
<!--            <el-col :span="4">-->
<!--                <div class="DataMapGridContent"></div>-->
<!--            </el-col>-->

<!--            <el-col :span="16">-->
<!--                <div class="DataMapGridContent">-->
<!--                    <el-button type="info" round id="subButton" v-on:click="post_data">更新数据库</el-button>-->
<!--                </div>-->
<!--            </el-col>-->

<!--            <el-col :span="4">-->
<!--                <div class="DataMapGridContent"></div>-->
<!--            </el-col>-->
<!--        </el-row>-->


        <!--卡片结束位置-->
    </el-card>
</template>

<script>

export default {
    name: "cConfigMap",
    data() {
        return {
            mapList2: [
                {
                    mapKey: '',
                    mapValue: ''
                }
            ],
            configList: [
                {
                    key: '{{ .alertName }} ',
                    value: 'alerts.0.labels.alertname',
                }, {
                    key: '{{ .aaa }}',
                    value: 'alerts.0.status',
                }, {
                    key: '{{ .bbb }}',
                    value: 'alerts.0.annotations.description',
                }, {
                    key: '{{ .N1 }}',
                    value: 'alerts.0.annotations.description',
                }, {
                    key: '{{ .N2 }}',
                    value: 'alerts.0.annotations.description',
                }, {
                    key: '{{ .N3 }}',
                    value: 'alerts.0.annotations.description',
                },

            ],
        };
    },
    computed: {},
    methods: {
        // 添加tableData的一行数据（和上面的添加输入框不是一回事）
        addTableData: function () {
            let mapKey = this.mapList2[0].mapKey;
            let mapValue = this.mapList2[0].mapValue;

            if (mapKey.length === 0 || mapValue.length === 0) {
                // alert("输入框不能为空...")
                this.$message.error('输入框不能为空...');
            } else {
                let tableRow = {
                    key: "{{ ." + mapKey + " }}",
                    value: mapValue
                };
                this.configList.push(tableRow);
                this.mapList2[0].mapKey = "";
                this.mapList2[0].mapValue = "";
                // console.log(this.tableData);
                // for (let i = 0; i < this.tableData.length; i++) {
                //     console.log(this.tableData[i].mapKey);
                // }

                this.$message.success("添加成功...");
            }
        },

        // 删除一行数据
        deleteRow(index, rows) {
            // console.log(index, rows);
            rows.splice(index, 1);
        },

        // 提交数据
        post_data: function () {
            const dataList = [];
            for (let i = 0; i < this.configList.length; i++) {
                let mapKey = this.configList[i].key;
                let mapKey2 = mapKey.split(" ")[1].split(".")[1]
                let mapValue = this.configList[i].value;

                //封装到临时字典中
                let newKeyValue = {};
                newKeyValue[mapKey2] = mapValue;

                //添加到List中
                dataList.push(newKeyValue);
            }
            // console.log(dataList.keys());
            this.axios.post(
                '/web/map',
                {
                    "key_value_list": dataList
                }
            )
                .then(response => {
                    // alert(response.data);
                    console.log(response.data);
                    this.$message.success("数据库更新成功...")
                })
                .catch(err => {
                    console.log(err);
                });
        }, //提交数据结束
        pullMapData: function () {
            this.axios.get('/web/map')
                .then(response => {
                    let tmpDataList = [];
                    response.data.forEach(iData => {
                        let tmpDict = {
                            "key": "{{ ." + iData["Key"] + " }}",
                            "value": iData["Value"],
                        };
                        tmpDataList.push(tmpDict);
                    });
                    this.configList = tmpDataList;
                })
                .catch(err => {
                    console.log(err);
                });
        }
    }, //methods结束
    created() {
        this.pullMapData();
    }
}
</script>

<style scoped>
/*#DataMapCard {*/
/*    width: 100%;*/
/*}*/


#subButton {
    width: 100%;
}


/*.box-card {*/
/*    width: 45rem;*/
/*    !* margin-top: 1.5rem; *!*/
/*    !* margin-left: 1.5rem; *!*/
/*}*/

.DataMapGridContent {
    /*圆角*/
    border-radius: 4px;
    /*最小高度*/
    min-height: 36px;
}


</style>